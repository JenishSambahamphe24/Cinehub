
import React from 'react'
import {BrowserRouter, Route, Routes} from 'react-router-dom'
import Home from './component/Home'
import Moviepage from './component/MoviePage'
import ErrorPage from './component/ErrorPage'

function App() {
  return (
    <div>
      <BrowserRouter>
      <Routes>
        <Route path='/' element={<Home/>}/>
        <Route path='movie/:id' element={<Moviepage/>}/>
        <Route path='*' element={<ErrorPage/>}/>
      </Routes>
      </BrowserRouter>
    </div>
  )
}

export default App


import React, { useState, createContext, useEffect, useContext } from "react";

export const API_URL = `http://www.omdbapi.com/?apikey=a5c55ebd`
const AppContext = createContext();

const AppProvider = ({ children }) => {
    const [isLoading, setIsLoading] = useState(true);
    const [movie, setMovie] = useState([]);
    const [querry, setQuerry] = useState('');
    const [isError, setIsError] = useState({ show: false, msg: '' })

    const getMovies = async function (url) {
        if (!querry) {
            setIsLoading(false)
            return
        }

        setIsLoading(true)
        try {
            const res = await fetch(url)
            const data = await res.json();

            if (data.Response === 'True') {
                setMovie(data.Search)
                setIsLoading(false)
                setIsError({
                    show: false,
                    msg:''
                })
            } else {
                setIsError({
                    show: true,
                    msg: data.Error
                })
                setIsLoading(false)
            }
        } catch (error) {
            setIsLoading(false)
            setIsError({
                show: true,
                msg: 'Something went wrong. Please try again later.'
            })
        }
    }

    useEffect(() => {
        let timerOut = setTimeout(() => {
            getMovies(`${API_URL}&s=${querry}`)
        }, 500);

        return ()=>clearTimeout(timerOut)
    },[querry])

    return (
        <AppContext.Provider value={{querry, setQuerry, isLoading, isError, movie }}>
            {children}
        </AppContext.Provider>
    )
}

const useGlobalContext = () => {
    return useContext(AppContext)
}


export { AppContext, AppProvider, useGlobalContext };



import React from 'react'
import { useGlobalContext } from '../context'
import { NavLink } from 'react-router-dom'

function Movies() {
  const { movie, isLoading } = useGlobalContext()

  if (isLoading) {
    return (
    <div className=''>
      <div className="loading">Loading...</div>
    </div>
    )
  }
  return (
    <section className='movie-page'>
      <div className="container grid grid-4-col">
        {movie.map((curMovie) => {
          const { imdbID, Title, Poster } = curMovie;
          const movieName = Title.substring(0,15);

          return (
          <NavLink key={imdbID} to={`movie/${imdbID}`}>
            <div className='cardmovie'>
              <div className="card-info">
                <h2>{movieName.length >= 15 ? `${movieName}...`:movieName}</h2>
                <img src={Poster} alt={imdbID} />
              </div>
            </div>
          </NavLink>
          )
        }
        )}

      </div>
    </section>
  )
}

export default Movies



import React, { useState } from 'react'
import { useGlobalContext } from '../context'

function Search() {
  const { querry, setQuerry, isError } = useGlobalContext();
  const handleOnSubmit = (e) => {
    e.preventDefault();
  }
  const handleOnChange = (e) => {
    setQuerry(e.target.value)
  }
  return (
    <div>
      <section className="search text-center mt-5">
        <h2>Search Movies</h2>
        <form action="" onSubmit={handleOnSubmit}>
          <div>
            <input type="text" value={querry} onChange={handleOnChange} />
          </div>
        </form>
        <div className="card-error">
          <p>{isError.show && isError.msg}</p>
        </div>
      </section>
    </div>
  )
}

export default Search



